import 'dart:io';
import 'dart:async';
import 'package:yaml/yaml.dart';

// Function to replace includes in HTML content
Future<String> replaceIncludes(String htmlContent) async {
  // Define a regular expression to find includes like <!--#include file="filename.html"-->
  final includeRegex = RegExp(r'<!--#include file="(.+?)"-->');

  // Find all matches in the HTML content
  final matches = includeRegex.allMatches(htmlContent);

  // Iterate over all matches
  for (final match in matches) {
    // Extract the filename from the match
    final filename = match.group(1);

    if (filename != null) {
      // Construct the path to the snippet file
      final snippetPath = 'snippets/$filename';

      // Read the contents of the snippet file
      try {
        final snippetContent = await File(snippetPath).readAsString();

        // Replace the include directive with the contents of the snippet file
        htmlContent = htmlContent.replaceFirst(match.group(0)!, snippetContent);
      } catch (e) {
        print('Error reading file $snippetPath: $e');
        // Handle the error as needed
      }
    }
  }

  return htmlContent;
}

// Function to replicate the folder structure and files
Future<void> replicateFolder(String inputBaseFolder, String outputBaseFolder) async {
  final inputDirectory = Directory(inputBaseFolder);
  final outputDirectory = Directory(outputBaseFolder);

  if (!await outputDirectory.exists()) {
    await outputDirectory.create(recursive: true);
  }

  await for (var entity in inputDirectory.list(recursive: true)) {
    final relativePath = entity.path.replaceFirst(inputBaseFolder, '');
    final newPath = '$outputBaseFolder$relativePath';

    if (entity is Directory) {
      final newDirectory = Directory(newPath);
      if (!await newDirectory.exists()) {
        await newDirectory.create(recursive: true);
      }
    } else if (entity is File) {
      if (entity.path.endsWith('.html')) {
        final htmlContent = await entity.readAsString();
        final processedContent = await replaceIncludes(htmlContent);
        final processedContent = await processHtmlWithFrontMatter((processedConten);
        final newFile = File(newPath);
        await newFile.writeAsString(processedContent);
      } else {
        await entity.copy(newPath);
      }
    }
  }
}

void main() async {
  final inputBaseFolder = 'path/to/inputBaseFolder';
  final outputBaseFolder = 'path/to/outputBaseFolder';

  await replicateFolder(inputBaseFolder, outputBaseFolder);
  print('Replication complete.');
}




// Function to replace FrontMatter variables in HTML content
Future<String> processHtmlWithFrontMatter(String fileContent) async {
  // Read the file content

  // Split the file content into FrontMatter and HTML content
  final parts = fileContent.split(RegExp(r'\n---\n'));

  if (parts.length < 3) {
    // If there's no FrontMatter, return the content as is
    return fileContent;
  }

  final frontMatterContent = parts[1];
  final htmlContent = parts.sublist(2).join('\n---\n');

  // Parse the FrontMatter content as YAML
  final frontMatter = loadYaml(frontMatterContent);

  // Replace placeholders in the HTML content with FrontMatter values
  var processedHtmlContent = htmlContent;
  if (frontMatter is Map) {
    frontMatter.forEach((key, value) {
      processedHtmlContent = processedHtmlContent.replaceAll('{{$key}}', value.toString());
    });
  }

  return processedHtmlContent;
}

void main2() async {
  final filePath = 'path/to/your/htmlfile.html';
  final processedHtmlContent = await processHtmlWithFrontMatter(filePath);
  print(processedHtmlContent);
}
